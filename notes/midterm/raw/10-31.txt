Running Notes - 
Review - Lab 3 questions
Popular questions 
 - Why create a UI.java class - 
	Input and Output

		Load data - datamodel in memory (Franchise.java and Store.java) 
		query - UI.java -> Methods for inquiring what user wants - 

 - Store.java - 
	bunch of operations - a thru f
		declare an instance variable for each computation
in Store.java.
	
	Before you use UI.java - make sure all calcs for each store are done.

	What is the print() for - is in Store.java
	it prints values of instance variables that are already calc'ed.

	good performance - reusability - maintainability.
	softwarearchitectures.com - 

What is the meaning of precalc values for operations in Store.java

What kind of comments - 

How is EOF determined?
	text or binary - 
	OS --> File System --> db of file info.
	FS - store the file length - starting location

	Assuming that file is stored contiguously on disk 
	Theoretical equation	
		File marker > starting point + file length
				101 + 50
	
	*File marker - location of byte being read in the file.

	return value from the read()
	-1   binary file 
	null text file

Data Streams - (Filter object)
	DataInputStream and DataOutputStream
		text to binary 
		binary to text 

WritePrimes.java
ReadPrimes.java

Serialization - 
	An object is created from a class.
	Take an object in memory and persist (write) to disk.

PerInfoClass - 400 properties.
 - 
	a1.writeObject(p1); //write one object per writeObject call.
	

import java.io.*;
import corejava.*;

class ObjectFileTest
{  public static void main(String[] args)
   {  try
      {  Employee[] staff = new Employee[3];

         staff[0] = new Employee("Harry Hacker", 35000, new Day(1989,10,1));
         staff[1] = new Manager("Carl Cracker", 75000, new Day(1987,12,15));
         staff[2] = new Employee("Tony Tester", 38000, new Day(1990,3,15));
      
      	 ObjectOutputStream out = new ObjectOutputStream(new 
            FileOutputStream("employee.dat"));
         out.writeObject(staff);
         out.close();

	ObjectInputStream in =  new ObjectInputStream(new FileInputStream("employee.dat"));
	Employee[] newStaff = (Employee[]) in.readObject();

         int i;
         for (i = 0; i < newStaff.length; i++)
            newStaff[i].raiseSalary(100);
         for (i = 0; i < newStaff.length; i++)
            newStaff[i].print();
      }
      catch(Exception e)
      {  System.out.print("Error: " + e);
         System.exit(1);
      }
   }
}

class Employee implements Serializable
{  public Employee(String n, double s, Day d)
   {  name = n;
      salary = s;
      hireDay = d;
   }

   public Employee() {}

   public void print()
   {  System.out.println(name + " " + salary 
         + " " + hireYear());
   }

   public void raiseSalary(double byPercent)
   {  salary *= 1 + byPercent / 100;
   }

   public int hireYear()
   {  return hireDay.getYear();
   }

   private String name;
   private double salary;
   private Day hireDay;
}

class Manager extends Employee
{  public Manager(String n, double s, Day d)
   {  super(n, s, d);
      secretaryName = "";
   }
    
   public Manager() {}

   public void raiseSalary(double byPercent)
   {  // add 1/2% bonus for every year of service
      Day today = new Day();
      double bonus = 0.5 * (today.getYear() - hireYear());
      super.raiseSalary(byPercent + bonus);
   }

   public void setSecretaryName(String n)
   {  secretaryName = n;
   }

   public String getSecretaryName()
   {  return secretaryName;
   }

   private String secretaryName;
}

//something for fun to checkout later
Beam me up scotty!https://stackoverflow.com/questions/25531574/simple-questions-about-the-scotty-haskell-web-framework`html $ mconcat ["<h1>Scotty, ", beam, " me up!</h1>"]`

Midterm - sample  - review
topics - 






































